name: Build and release
on:
  schedule:
    - cron: '2 2 * * 2'
  workflow_dispatch:
jobs:
  build-linux-gdb:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        repository: riscv-collab/riscv-gnu-toolchain
    - name: Install deps
      run: sudo apt install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev
    - name: Run configure
      run: sudo ./configure --prefix=/opt/riscv/ --enable-multilib
    - name: Run make
      run: sudo make -j$(nproc --all)
    - name: Test executables
      run: /opt/riscv/bin/riscv64-unknown-elf-gcc -v --version
    - name: Get commit hash
      run: echo "COMMIT_HASH=$(git log -1 --pretty='%h')" >> $GITHUB_ENV
    - name: Archive and compress debug executables
      run: |
        cd /opt/
        mkdir ~/artifact/
        tar -c -I 'xz -9 -T0' -f ${{ format('~/artifact/riscv-{0}-newlib-multilib-gdb-debug.tar.xz', env.COMMIT_HASH) }} riscv/
    - name: Strip executables
      run: sudo find /opt/riscv/ -executable -type f -exec strip {} \;
    - name: Archive and compress executables
      run: |
        cd /opt/
        tar -c -I 'xz -9 -T0' -f ${{ format('~/artifact/riscv-{0}-newlib-multilib-gdb.tar.xz', env.COMMIT_HASH) }} riscv/
    - name: Upload artifacts
      uses: actions/upload-artifact@v2.2.4
      with:
        path: ~/artifact/*

  build-linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        repository: riscv-collab/riscv-gnu-toolchain
    - name: Install deps
      run: sudo apt install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev
    - name: Run configure
      run: sudo ./configure --prefix=/opt/riscv/ --enable-multilib --disable-gdb
    - name: Run make
      run: sudo make -j$(nproc --all)
    - name: Test executables
      run: /opt/riscv/bin/riscv64-unknown-elf-gcc -v --version
    - name: Get commit hash
      run: echo "COMMIT_HASH=$(git log -1 --pretty='%h')" >> $GITHUB_ENV
    - name: Archive and compress debug executables
      run: |
        cd /opt/
        mkdir ~/artifact/
        tar -c -I 'xz -9 -T0' -f ${{ format('~/artifact/riscv-{0}-newlib-multilib-debug.tar.xz', env.COMMIT_HASH) }} riscv/
    - name: Strip executables
      run: sudo find /opt/riscv/ -executable -type f -exec strip {} \;
    - name: Archive and compress executables
      run: |
        cd /opt/
        tar -c -I 'xz -9 -T0' -f ${{ format('~/artifact/riscv-{0}-newlib-multilib.tar.xz', env.COMMIT_HASH) }} riscv/
    - name: Upload artifacts
      uses: actions/upload-artifact@v2.2.4
      with:
        path: ~/artifact/*

  build-windows-gdb:
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v2
      with:
        repository: riscv-collab/riscv-gnu-toolchain
    - name: Install MSYS2 and deps
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-toolchain
          base-devel
          git
          zip
    - name: Tweak Mingw-w64
      shell: python
      run: |
        from pathlib import Path
        from re import sub
        # define ushort, uint and ulong
        path = Path('C:/msys64/mingw64/x86_64-w64-mingw32/include/sys/types.h')
        with open(path, 'r', encoding='utf8') as f:
            s = f.read()
        def gen_repl(m):
            repl = (
                f'typedef unsigned short int ushort;\n'
                f'typedef unsigned int uint;\n'
                f'typedef unsigned long int ulong;\n\n'
                f'{m.group(0)}'
            )
            print('** replace:')
            print(m.group(0))
            print('** to:')
            print(repl)
            return repl
        s = sub(
            r'#endif.*_INC_TYPES',
            gen_repl,
            s
        )
        with open(path, 'w', encoding='utf8') as f:
            f.write(s)
    - name: Run configure
      run: ./configure --prefix=/opt/riscv/ --enable-multilib --without-system-zlib
    - name: Run make (expected to fail)
      continue-on-error: true
      run: make -j$(nproc --all)
    - name: Get path of sources
      run: echo "SOURCE_PATH=$(cygpath -alw .)" >> $GITHUB_ENV
    - name: Tweak gdb
      shell: python
      run: |
        from os import environ
        from pathlib import Path
        from re import sub, DOTALL
        source_path = Path(environ['SOURCE_PATH'])

        # add -fcommon cflag
        path = source_path / 'riscv-gdb/readline/readline/Makefile.in'
        with open(path, 'r', encoding='utf8') as f:
            s = f.read()
        def gen_repl(m):
            repl = f'{m.group(0)}\nCFLAGS += " -fcommon"'
            print(f'** replace @ "{path}":')
            print(m.group(0))
            print('** to:')
            print(repl)
            return repl
        s = sub(
            r'CFLAGS = @CFLAGS@',
            gen_repl,
            s
        )
        with open(path, 'w', encoding='utf8') as f:
            f.write(s)

        path = source_path / 'build-gdb-newlib/Makefile'
        with open(path, 'r', encoding='utf8') as f:
            s = f.read()
        def gen_repl(m):
            repl = f'{m.group(1)} -fcommon{m.group(2)}'
            print(f'** replace @ "{path}":')
            print(m.group(0))
            print('** to:')
            print(repl)
            return repl
        s = sub(
            r'(CFLAGS\s*=.*)(\n)',
            gen_repl,
            s
        )
        with open(path, 'w', encoding='utf8') as f:
            f.write(s)

        path = source_path / 'riscv-gdb/readline/readline/configure'
        with open(path, 'r', encoding='utf8') as f:
            s = f.read()
        def gen_repl(m):
            repl = f'{m.group(0)}\n\nCFLAGS="$CFLAGS -fcommon"'
            print(f'** replace @ "{path}":')
            print(m.group(0))
            print('** to:')
            print(repl)
            return repl
        s = sub(
            r'CFLAGS="\$CFLAGS -O"',
            gen_repl,
            s
        )
        with open(path, 'w', encoding='utf8') as f:
            f.write(s)

        # link libbcrypt
        path = source_path / 'riscv-gdb/gdb/Makefile.in'
        with open(path, 'r', encoding='utf8') as f:
            s = f.read()
        def gen_repl(m):
            repl = f'{m.group(1)} -lbcrypt{m.group(2)}'
            print(f'** replace @ "{path}":')
            print(m.group(0))
            print('** to:')
            print(repl)
            return repl
        s = sub(
            r'(gdb\$\(EXEEXT\)\:.*?\$\(CC_LD\).*?)(\n\S)',
            gen_repl,
            s, 1, DOTALL
        )
        with open(path, 'w', encoding='utf8') as f:
            f.write(s)
    - name: Run make again
      run: make -j$(nproc --all)
    - name: Test executables
      run: /opt/riscv/bin/riscv64-unknown-elf-gcc -v --version
    - name: Get commit hash
      run: echo "COMMIT_HASH=$(git log -1 --pretty='%h')" >> $GITHUB_ENV
    - name: Archive and compress debug executables
      run: |
        cd /opt/
        zip -9 -r ${{ format('~/artifact/riscv-{0}-newlib-multilib-gdb-windows-debug.zip', env.COMMIT_HASH) }} riscv/
    - name: Strip executables
      run: find /opt/riscv/ -executable -type f -exec strip {} \;
    - name: Archive and compress executables
      run: |
        cd /opt/
        mkdir ~/artifact/
        zip -9 -r ${{ format('~/artifact/riscv-{0}-newlib-multilib-gdb-windows.zip', env.COMMIT_HASH) }} riscv/
    - name: Get path of artifacts
      run: echo "ARTIFACT_PATH=$(cygpath -alw ~/artifact)" >> $GITHUB_ENV
    - name: Upload artifacts
      uses: actions/upload-artifact@v2.2.4
      with:
        path: ${{ format('{0}/*', env.ARTIFACT_PATH) }}

  build-windows:
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v2
      with:
        repository: riscv-collab/riscv-gnu-toolchain
    - name: Install MSYS2 and deps
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-toolchain
          base-devel
          git
          zip
    - name: Tweak Mingw-w64
      shell: python
      run: |
        from pathlib import Path
        from re import sub
        # define ushort, uint and ulong
        path = Path('C:/msys64/mingw64/x86_64-w64-mingw32/include/sys/types.h')
        with open(path, 'r', encoding='utf8') as f:
            s = f.read()
        def gen_repl(m):
            repl = (
                f'typedef unsigned short int ushort;\n'
                f'typedef unsigned int uint;\n'
                f'typedef unsigned long int ulong;\n\n'
                f'{m.group(0)}'
            )
            print(f'** replace @ "{path}":')
            print(m.group(0))
            print('** to:')
            print(repl)
            return repl
        s = sub(
            r'#endif.*_INC_TYPES',
            gen_repl,
            s
        )
        with open(path, 'w', encoding='utf8') as f:
            f.write(s)
    - name: Run configure
      run: ./configure --prefix=/opt/riscv/ --enable-multilib --without-system-zlib --disable-gdb
    - name: Run make
      run: make -j$(nproc --all)
    - name: Test executables
      run: /opt/riscv/bin/riscv64-unknown-elf-gcc -v --version
    - name: Get commit hash
      run: echo "COMMIT_HASH=$(git log -1 --pretty='%h')" >> $GITHUB_ENV
    - name: Archive and compress debug executables
      run: |
        cd /opt/
        zip -9 -r ${{ format('~/artifact/riscv-{0}-newlib-multilib-windows-debug.zip', env.COMMIT_HASH) }} riscv/
    - name: Strip executables
      run: find /opt/riscv/ -executable -type f -exec strip {} \;
    - name: Archive and compress executables
      run: |
        cd /opt/
        mkdir ~/artifact/
        zip -9 -r ${{ format('~/artifact/riscv-{0}-newlib-multilib-windows.zip', env.COMMIT_HASH) }} riscv/
    - name: Get path of artifacts
      run: echo "ARTIFACT_PATH=$(cygpath -alw ~/artifact)" >> $GITHUB_ENV
    - name: Upload artifacts
      uses: actions/upload-artifact@v2.2.4
      with:
        path: ${{ format('{0}/*', env.ARTIFACT_PATH) }}

  release:
    needs: [build-linux-gdb, build-linux, build-windows-gdb, build-windows]
    if: always()
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/download-artifact@v2.0.10
      with:
        path: ~/
    - name: List artifacts
      run: |
        ls -alph /home/runner/artifact
        ls -alph ~/artifact
        ls -alph /home/runner
        ls -alph ~
    - name: Get date string
      run: echo "DATE=$(date -u +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
    - uses: softprops/action-gh-release@v0.1.13
      with:
        name: ${{ format('{0} build {1}', env.DATE, github.run_number) }}
        body: |
          ${{ format('Auto-build #{1} at {0} UTC.', env.DATE, github.run_number) }}
          Artifacts contain debug symbols are named `*-debug`.
          Artifacts contain GDB(The GNU Project Debugger) are named `*-gdb`.
          **Download `riscv-*-newlib-multilib-gdb.tar.xz`(for GNU/Linux) or `riscv-*-newlib-multilib-gdb-windows.zip`(for Windows) if you don't konw what to do.**
        tag_name: auto-build-release
        files: |
          ~/artifact/*
